[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "social-download-manager"
version = "2.0.0-dev"
description = "Multi-platform social media content downloader"
authors = [
    {name = "Social Download Manager Team"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["download", "social-media", "tiktok", "youtube", "instagram"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Internet :: WWW/HTTP",
]

dependencies = [
    "PyQt6>=6.4.0",
    "requests>=2.28.0",
    "yt-dlp>=2023.1.6",
    "sqlite3",  # Built-in with Python
    "threading",  # Built-in with Python
    "pathlib",  # Built-in with Python
    "json",  # Built-in with Python
    "dataclasses",  # Built-in with Python >= 3.7
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.2.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.2.0",
    "pytest-mock>=3.8.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/social-download-manager/sdm"
Repository = "https://github.com/social-download-manager/sdm.git"
Issues = "https://github.com/social-download-manager/sdm/issues"
Documentation = "https://social-download-manager.readthedocs.io"

[project.scripts]
sdm = "main:main"
social-download-manager = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "platforms*", "data*", "ui*", "utils*", "localization*"]
exclude = ["tests*", "backup*", "scripts*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  backup/
  | scripts/
  | assets/
  | .git/
  | __pycache__/
  | .venv/
  | venv/
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["backup/*", "scripts/*", "assets/*"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "backup/",
    "scripts/",
    "assets/",
    ".venv/",
    "venv/",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "PyQt6.*",
    "yt_dlp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=platforms", 
    "--cov=data",
    "--cov=ui",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ui: marks tests as UI tests",
    "platform: marks tests as platform-specific tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/backup/*",
    "*/scripts/*",
    "*/assets/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 